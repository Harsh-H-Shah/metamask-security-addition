diff --git a/dist/index.js b/dist/index.js
index 7e79fd81177ade784e69e1db47db763d0d007863..7619692e79cfae4c52d5aa31eaf3abb367a76db6 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -13,8 +13,10 @@ function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflec
 function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
 var _require = require('@metamask/eth-block-tracker'),
   PollingBlockTracker = _require.PollingBlockTracker;
-var Eth = require('@metamask/ethjs-query');
-var EthContract = require('@metamask/ethjs-contract');
+var _require2 = require('@ethersproject/providers'),
+  Web3Provider = _require2.Web3Provider;
+var _require3 = require('@ethersproject/contracts'),
+  Contract = _require3.Contract;
 var Token = require('./token');
 var abi = require('human-standard-token-abi');
 var SafeEventEmitter = require('@metamask/safe-event-emitter')["default"];
@@ -34,9 +36,7 @@ var TokenTracker = /*#__PURE__*/function (_SafeEventEmitter) {
       provider: opts.provider,
       pollingInterval: pollingInterval
     });
-    var eth = new Eth(opts.provider);
-    var contract = new EthContract(eth);
-    _this.TokenContract = contract(abi);
+    _this.provider = opts.provider;
     var tokens = opts.tokens || [];
     _this.balanceDecimals = opts.balanceDecimals;
     _this.tokens = tokens.map(function (tokenOpts) {
@@ -65,6 +65,11 @@ var TokenTracker = /*#__PURE__*/function (_SafeEventEmitter) {
         return token.serialize();
       });
     }
+  }, {
+    key: "getContractAtAddress",
+    value: function getContractAtAddress(tokenAddress) {
+      return new Contract(tokenAddress, abi, new Web3Provider(this.provider));
+    }
   }, {
     key: "updateBalances",
     value: function () {
@@ -106,7 +111,7 @@ var TokenTracker = /*#__PURE__*/function (_SafeEventEmitter) {
         symbol = opts.symbol,
         balance = opts.balance,
         decimals = opts.decimals;
-      var contract = this.TokenContract.at(address);
+      var contract = this.getContractAtAddress(address);
       return new Token({
         address: address,
         symbol: symbol,
diff --git a/dist/token.js b/dist/token.js
index 1fc78fb56f943950e0cde03aef27090dd7f09fd1..5ad25bc56076574d1f9a3617480881ef7934880c 100644
--- a/dist/token.js
+++ b/dist/token.js
@@ -7,6 +7,8 @@ var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/
 var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
 var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
 var BN = require('bn.js');
+var _require = require("@ethersproject/bignumber"),
+  BigNumber = _require.BigNumber;
 var util = require('./util');
 
 /**
@@ -226,15 +228,18 @@ var Token = /*#__PURE__*/function () {
               throw _context5.t1;
             case 22:
               if (!result) {
-                _context5.next = 26;
+                _context5.next = 27;
                 break;
               }
-              val = result[0];
+              val = result;
+              if (BigNumber.isBigNumber(result)) {
+                val = new BN(result.toString());
+              }
               this[key] = val;
               return _context5.abrupt("return", val);
-            case 26:
-              return _context5.abrupt("return", this[key]);
             case 27:
+              return _context5.abrupt("return", this[key]);
+            case 28:
             case "end":
               return _context5.stop();
           }
