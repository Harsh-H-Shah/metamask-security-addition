import { createProjectLogger } from '@metamask/utils';
import {
  ControllerByName,
  ControllerInitFunction,
  ControllerInitRequest,
  ControllerName,
} from './types';
import { Controller } from './controller-list';

const log = createProjectLogger('controller-init');

/** Result of initializing controllers. */
export type InitControllersResult = {
  /** All API methods exposed by the controllers. */
  controllerApi: Record<string, Controller>;

  /** All controllers that provided a memory state key. */
  controllerMemState: Record<string, Controller>;

  /** All controllers that provided a persisted state key. */
  controllerPersistedState: Record<string, Controller>;

  /** All initialized controllers keyed by name. */
  controllersByName: ControllerByName;
};

/**
 * Initialize the controllers according to the provided init objects.
 * Each init object can be a function that returns a controller, or a `ControllerInit` instance.
 *
 * @param options - Options bag.
 * @param options.initFunctions - Array of init functions.
 * @param options.initRequest - Base request used to initialize the controllers.
 * Excluding the properties that are generated by this function.
 * @returns The initialized controllers and associated data.
 */
export function initControllers({
  initFunctions,
  initRequest,
}: {
  initFunctions: ControllerInitFunction<Controller>[];
  initRequest: Omit<ControllerInitRequest, 'getController'>;
}): InitControllersResult {
  log('Initializing controllers', initFunctions.length);

  // Will be populated with all controllers once initialized.
  let controllersByName = {} as ControllerByName;
  const controllerPersistedState: Record<string, Controller> = {};
  const controllerMemState: Record<string, Controller> = {};
  let controllerApi = {};

  const getController = <Name extends ControllerName>(
    name: Name,
  ): ControllerByName[Name] => getControllerOrThrow(controllersByName, name);

  for (const initFunction of initFunctions) {
    const finalInitRequest: ControllerInitRequest = {
      ...initRequest,
      getController,
    };

    const result = initFunction(finalInitRequest);

    const {
      controller,
      persistedStateKey: persistedStateKeyRaw,
      memStateKey: memStateKeyRaw,
    } = result;

    const { name } = controller;
    const api = result.api ?? {};

    const persistedStateKey =
      persistedStateKeyRaw === null ? undefined : persistedStateKeyRaw ?? name;

    const memStateKey =
      memStateKeyRaw === null ? undefined : memStateKeyRaw ?? name;

    controllersByName = {
      ...controllersByName,
      [name]: controller,
    };

    controllerApi = {
      ...controllerApi,
      ...api,
    };

    if (persistedStateKey) {
      controllerPersistedState[persistedStateKey] = controller;
    }

    if (memStateKey) {
      controllerMemState[memStateKey] = controller;
    }

    log('Initialized controller', name, {
      api: Object.keys(api),
      persistedStateKey,
      memStateKey,
    });
  }

  return {
    controllerApi,
    controllerMemState,
    controllerPersistedState,
    controllersByName,
  };
}

function getControllerOrThrow<Name extends ControllerName>(
  controllersByName: ControllerByName,
  name: Name,
): ControllerByName[Name] {
  const controller = controllersByName[name];

  if (!controller) {
    throw new Error(`Controller requested before it was initialized: ${name}`);
  }

  return controller;
}
